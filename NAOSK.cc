// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "NAO.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
ssr::ActuatorPosition::operator>>= (cdrStream &_n) const
{
  _n.marshalString(name,0);
  position >>= _n;

}

void
ssr::ActuatorPosition::operator<<= (cdrStream &_n)
{
  name = _n.unmarshalString(0);
  (::CORBA::Float&)position <<= _n;

}

void
ssr::ActuatorPositionArray::operator>>= (cdrStream &_n) const
{
  (const ActuatorPositionSeq&) data >>= _n;
  fractionSpeed >>= _n;

}

void
ssr::ActuatorPositionArray::operator<<= (cdrStream &_n)
{
  (ActuatorPositionSeq&)data <<= _n;
  (::CORBA::Float&)fractionSpeed <<= _n;

}

void
ssr::StringArray::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_String&) data >>= _n;

}

void
ssr::StringArray::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_String&)data <<= _n;

}

void
ssr::FloatArray::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &) data >>= _n;

}

void
ssr::FloatArray::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Float, 4, 4 > &)data <<= _n;

}

void
ssr::BoolArray::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_Boolean&) data >>= _n;

}

void
ssr::BoolArray::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_Boolean&)data <<= _n;

}

void
ssr::LongArray::operator>>= (cdrStream &_n) const
{
  (const _CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &) data >>= _n;

}

void
ssr::LongArray::operator<<= (cdrStream &_n)
{
  (_CORBA_Unbounded_Sequence_w_FixSizeElement< ::CORBA::Long, 4, 4 > &)data <<= _n;

}

ssr::ALMotion_ptr ssr::ALMotion_Helper::_nil() {
  return ::ssr::ALMotion::_nil();
}

::CORBA::Boolean ssr::ALMotion_Helper::is_nil(::ssr::ALMotion_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALMotion_Helper::release(::ssr::ALMotion_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALMotion_Helper::marshalObjRef(::ssr::ALMotion_ptr obj, cdrStream& s) {
  ::ssr::ALMotion::_marshalObjRef(obj, s);
}

ssr::ALMotion_ptr ssr::ALMotion_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALMotion::_unmarshalObjRef(s);
}

void ssr::ALMotion_Helper::duplicate(::ssr::ALMotion_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALMotion_ptr
ssr::ALMotion::_duplicate(::ssr::ALMotion_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALMotion_ptr
ssr::ALMotion::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALMotion_ptr
ssr::ALMotion::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALMotion_ptr
ssr::ALMotion::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALMotion _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALMotion* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALMotion;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALMotion::_PD_repoId = "IDL:ssr/ALMotion:1.0";


ssr::_objref_ALMotion::~_objref_ALMotion() {
  
}


ssr::_objref_ALMotion::_objref_ALMotion(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALMotion::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALMotion::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALMotion::_PD_repoId )
    return (::ssr::ALMotion_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALMotion::_PD_repoId) )
    return (::ssr::ALMotion_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cssr_mStringArray_i_cssr_mFloatArray_i_cfloat
class _0RL_cd_a3d068595b8139d6_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ssr::StringArray_var arg_0_;
  const ssr::StringArray* arg_0;
  ssr::FloatArray_var arg_1_;
  const ssr::FloatArray* arg_1;
  ::CORBA::Float arg_2;
};

void _0RL_cd_a3d068595b8139d6_00000000::marshalArguments(cdrStream& _n)
{
  (const ssr::StringArray&) *arg_0 >>= _n;
  (const ssr::FloatArray&) *arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ssr::StringArray;
  (ssr::StringArray&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new ssr::FloatArray;
  (ssr::FloatArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();
  (::CORBA::Float&)arg_2 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_00000000* tcd = (_0RL_cd_a3d068595b8139d6_00000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->setAngles(*tcd->arg_0, *tcd->arg_1, tcd->arg_2);


}

void ssr::_objref_ALMotion::setAngles(const ::ssr::StringArray& name, const ::ssr::FloatArray& value, ::CORBA::Float fractionSpeed)
{
  _0RL_cd_a3d068595b8139d6_00000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_10000000, "setAngles", 10);
  _call_desc.arg_0 = &(::ssr::StringArray&) name;
  _call_desc.arg_1 = &(::ssr::FloatArray&) value;
  _call_desc.arg_2 = fractionSpeed;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mFloatArray_i_cssr_mStringArray_i_cboolean
class _0RL_cd_a3d068595b8139d6_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ssr::StringArray_var arg_0_;
  const ssr::StringArray* arg_0;
  ::CORBA::Boolean arg_1;
  ssr::FloatArray_var result;
};

void _0RL_cd_a3d068595b8139d6_20000000::marshalArguments(cdrStream& _n)
{
  (const ssr::StringArray&) *arg_0 >>= _n;
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_a3d068595b8139d6_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ssr::StringArray;
  (ssr::StringArray&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1 = _n.unmarshalBoolean();

}

void _0RL_cd_a3d068595b8139d6_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::FloatArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::FloatArray;
  (ssr::FloatArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_20000000* tcd = (_0RL_cd_a3d068595b8139d6_20000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getAngles(*tcd->arg_0, tcd->arg_1);


}

ssr::FloatArray* ssr::_objref_ALMotion::getAngles(const ::ssr::StringArray& name, ::CORBA::Boolean useSensors)
{
  _0RL_cd_a3d068595b8139d6_20000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_30000000, "getAngles", 10);
  _call_desc.arg_0 = &(::ssr::StringArray&) name;
  _call_desc.arg_1 = useSensors;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring
class _0RL_cd_a3d068595b8139d6_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
};

void _0RL_cd_a3d068595b8139d6_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->openHane(tcd->arg_0);


}

void ssr::_objref_ALMotion::openHane(const char* name)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_50000000, "openHane", 9);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->closeHand(tcd->arg_0);


}

void ssr::_objref_ALMotion::closeHand(const char* name)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_60000000, "closeHand", 10);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cssr_mStringArray_i_cssr_mFloatArray
class _0RL_cd_a3d068595b8139d6_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_70000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ssr::StringArray_var arg_0_;
  const ssr::StringArray* arg_0;
  ssr::FloatArray_var arg_1_;
  const ssr::FloatArray* arg_1;
};

void _0RL_cd_a3d068595b8139d6_70000000::marshalArguments(cdrStream& _n)
{
  (const ssr::StringArray&) *arg_0 >>= _n;
  (const ssr::FloatArray&) *arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_70000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ssr::StringArray;
  (ssr::StringArray&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();
  arg_1_ = new ssr::FloatArray;
  (ssr::FloatArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_70000000* tcd = (_0RL_cd_a3d068595b8139d6_70000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->setStiffness(*tcd->arg_0, *tcd->arg_1);


}

void ssr::_objref_ALMotion::setStiffness(const ::ssr::StringArray& name, const ::ssr::FloatArray& stiffnesses)
{
  _0RL_cd_a3d068595b8139d6_70000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_80000000, "setStiffness", 13);
  _call_desc.arg_0 = &(::ssr::StringArray&) name;
  _call_desc.arg_1 = &(::ssr::FloatArray&) stiffnesses;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mFloatArray_i_cssr_mStringArray
class _0RL_cd_a3d068595b8139d6_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_90000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ssr::StringArray_var arg_0_;
  const ssr::StringArray* arg_0;
  ssr::FloatArray_var result;
};

void _0RL_cd_a3d068595b8139d6_90000000::marshalArguments(cdrStream& _n)
{
  (const ssr::StringArray&) *arg_0 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_90000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new ssr::StringArray;
  (ssr::StringArray&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_90000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::FloatArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::FloatArray;
  (ssr::FloatArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_90000000* tcd = (_0RL_cd_a3d068595b8139d6_90000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getStiffness(*tcd->arg_0);


}

ssr::FloatArray* ssr::_objref_ALMotion::getStiffness(const ::ssr::StringArray& name)
{
  _0RL_cd_a3d068595b8139d6_90000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a0000000, "getStiffness", 13);
  _call_desc.arg_0 = &(::ssr::StringArray&) name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void
class _0RL_cd_a3d068595b8139d6_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
    
  
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_a3d068595b8139d6_b0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_c0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->rest();


}

void ssr::_objref_ALMotion::rest()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c0000000, "rest", 5);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_d0000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->wakeUp();


}

void ssr::_objref_ALMotion::wakeUp()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d0000000, "wakeUp", 7);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cfloat_i_cfloat_i_cfloat
class _0RL_cd_a3d068595b8139d6_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_e0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Float arg_0;
  ::CORBA::Float arg_1;
  ::CORBA::Float arg_2;
};

void _0RL_cd_a3d068595b8139d6_e0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_e0000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Float&)arg_0 <<= _n;
  (::CORBA::Float&)arg_1 <<= _n;
  (::CORBA::Float&)arg_2 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_e0000000* tcd = (_0RL_cd_a3d068595b8139d6_e0000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->moveTo(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void ssr::_objref_ALMotion::moveTo(::CORBA::Float x, ::CORBA::Float y, ::CORBA::Float theta)
{
  _0RL_cd_a3d068595b8139d6_e0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f0000000, "moveTo", 7);
  _call_desc.arg_0 = x;
  _call_desc.arg_1 = y;
  _call_desc.arg_2 = theta;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_e0000000* tcd = (_0RL_cd_a3d068595b8139d6_e0000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->moveToward(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void ssr::_objref_ALMotion::moveToward(::CORBA::Float vx, ::CORBA::Float vy, ::CORBA::Float vtheta)
{
  _0RL_cd_a3d068595b8139d6_e0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_01000000, "moveToward", 11);
  _call_desc.arg_0 = vx;
  _call_desc.arg_1 = vy;
  _call_desc.arg_2 = vtheta;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mFloatArray
class _0RL_cd_a3d068595b8139d6_11000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_11000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ssr::FloatArray_var result;
};

void _0RL_cd_a3d068595b8139d6_11000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::FloatArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_11000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::FloatArray;
  (ssr::FloatArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_11000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_11000000* tcd = (_0RL_cd_a3d068595b8139d6_11000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getRobotPosition();


}

ssr::FloatArray* ssr::_objref_ALMotion::getRobotPosition()
{
  _0RL_cd_a3d068595b8139d6_11000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_21000000, "getRobotPosition", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_11000000* tcd = (_0RL_cd_a3d068595b8139d6_11000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getRobotVelocity();


}

ssr::FloatArray* ssr::_objref_ALMotion::getRobotVelocity()
{
  _0RL_cd_a3d068595b8139d6_11000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_31000000, "getRobotVelocity", 17);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_41000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->stopMove();


}

void ssr::_objref_ALMotion::stopMove()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_41000000, "stopMove", 9);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cboolean
class _0RL_cd_a3d068595b8139d6_51000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_51000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Boolean result;
};

void _0RL_cd_a3d068595b8139d6_51000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a3d068595b8139d6_51000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a3d068595b8139d6_51000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_61000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_51000000* tcd = (_0RL_cd_a3d068595b8139d6_51000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->moveIsActive();


}

::CORBA::Boolean ssr::_objref_ALMotion::moveIsActive()
{
  _0RL_cd_a3d068595b8139d6_51000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_61000000, "moveIsActive", 13);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_71000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->waitUntilMoveIsFinished();


}

void ssr::_objref_ALMotion::waitUntilMoveIsFinished()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_71000000, "waitUntilMoveIsFinished", 24);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_81000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->moveInit();


}

void ssr::_objref_ALMotion::moveInit()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_81000000, "moveInit", 9);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cboolean_i_cboolean
class _0RL_cd_a3d068595b8139d6_91000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_91000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Boolean arg_0;
  ::CORBA::Boolean arg_1;
};

void _0RL_cd_a3d068595b8139d6_91000000::marshalArguments(cdrStream& _n)
{
  _n.marshalBoolean(arg_0);
  _n.marshalBoolean(arg_1);

}

void _0RL_cd_a3d068595b8139d6_91000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalBoolean();
  arg_1 = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a3d068595b8139d6_91000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_a1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_91000000* tcd = (_0RL_cd_a3d068595b8139d6_91000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->setWalkArmEnabled(tcd->arg_0, tcd->arg_1);


}

void ssr::_objref_ALMotion::setWalkArmEnabled(::CORBA::Boolean leftArmEnable, ::CORBA::Boolean rightArmEnable)
{
  _0RL_cd_a3d068595b8139d6_91000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a1000000, "setWalkArmEnabled", 18);
  _call_desc.arg_0 = leftArmEnable;
  _call_desc.arg_1 = rightArmEnable;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mBoolArray
class _0RL_cd_a3d068595b8139d6_b1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_b1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ssr::BoolArray_var result;
};

void _0RL_cd_a3d068595b8139d6_b1000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::BoolArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_b1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::BoolArray;
  (ssr::BoolArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_b1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_c1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_b1000000* tcd = (_0RL_cd_a3d068595b8139d6_b1000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getWalkArmEnabled();


}

ssr::BoolArray* ssr::_objref_ALMotion::getWalkArmEnabled()
{
  _0RL_cd_a3d068595b8139d6_b1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c1000000, "getWalkArmEnabled", 18);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mFloatArray_i_cstring_i_clong_i_cboolean
class _0RL_cd_a3d068595b8139d6_d1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_d1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean arg_2;
  ssr::FloatArray_var result;
};

void _0RL_cd_a3d068595b8139d6_d1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  _n.marshalBoolean(arg_2);

}

void _0RL_cd_a3d068595b8139d6_d1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2 = _n.unmarshalBoolean();

}

void _0RL_cd_a3d068595b8139d6_d1000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::FloatArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_d1000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::FloatArray;
  (ssr::FloatArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_d1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_e1000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_d1000000* tcd = (_0RL_cd_a3d068595b8139d6_d1000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getPosition(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

ssr::FloatArray* ssr::_objref_ALMotion::getPosition(const char* name, ::CORBA::Long space, ::CORBA::Boolean useSensors)
{
  _0RL_cd_a3d068595b8139d6_d1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e1000000, "getPosition", 12);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = space;
  _call_desc.arg_2 = useSensors;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_clong_i_cssr_mFloatArray_i_cfloat_i_clong
class _0RL_cd_a3d068595b8139d6_f1000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_f1000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ssr::FloatArray_var arg_2_;
  const ssr::FloatArray* arg_2;
  ::CORBA::Float arg_3;
  ::CORBA::Long arg_4;
};

void _0RL_cd_a3d068595b8139d6_f1000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  (const ssr::FloatArray&) *arg_2 >>= _n;
  arg_3 >>= _n;
  arg_4 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_f1000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  arg_2_ = new ssr::FloatArray;
  (ssr::FloatArray&)arg_2_ <<= _n;
  arg_2 = &arg_2_.in();
  (::CORBA::Float&)arg_3 <<= _n;
  (::CORBA::Long&)arg_4 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_f1000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_02000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_f1000000* tcd = (_0RL_cd_a3d068595b8139d6_f1000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->setPosition(tcd->arg_0, tcd->arg_1, *tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void ssr::_objref_ALMotion::setPosition(const char* name, ::CORBA::Long space, const ::ssr::FloatArray& position, ::CORBA::Float fractionMaxSpeed, ::CORBA::Long axisMask)
{
  _0RL_cd_a3d068595b8139d6_f1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_02000000, "setPosition", 12);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = space;
  _call_desc.arg_2 = &(::ssr::FloatArray&) position;
  _call_desc.arg_3 = fractionMaxSpeed;
  _call_desc.arg_4 = axisMask;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_12000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_f1000000* tcd = (_0RL_cd_a3d068595b8139d6_f1000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  impl->setTransform(tcd->arg_0, tcd->arg_1, *tcd->arg_2, tcd->arg_3, tcd->arg_4);


}

void ssr::_objref_ALMotion::setTransform(const char* name, ::CORBA::Long space, const ::ssr::FloatArray& transform, ::CORBA::Float fractionMaxSpeed, ::CORBA::Long axisMask)
{
  _0RL_cd_a3d068595b8139d6_f1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_12000000, "setTransform", 13);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = space;
  _call_desc.arg_2 = &(::ssr::FloatArray&) transform;
  _call_desc.arg_3 = fractionMaxSpeed;
  _call_desc.arg_4 = axisMask;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_22000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_d1000000* tcd = (_0RL_cd_a3d068595b8139d6_d1000000*)cd;
  ssr::_impl_ALMotion* impl = (ssr::_impl_ALMotion*) svnt->_ptrToInterface(ssr::ALMotion::_PD_repoId);
  tcd->result = impl->getTransform(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

ssr::FloatArray* ssr::_objref_ALMotion::getTransform(const char* name, ::CORBA::Long space, ::CORBA::Boolean useSensorValues)
{
  _0RL_cd_a3d068595b8139d6_d1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_22000000, "getTransform", 13);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = space;
  _call_desc.arg_2 = useSensorValues;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ssr::_pof_ALMotion::~_pof_ALMotion() {}


omniObjRef*
ssr::_pof_ALMotion::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALMotion(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALMotion::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALMotion::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALMotion _the_pof_ssr_mALMotion;

ssr::_impl_ALMotion::~_impl_ALMotion() {}


::CORBA::Boolean
ssr::_impl_ALMotion::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "setAngles") ) {

    _0RL_cd_a3d068595b8139d6_00000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_10000000, "setAngles", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAngles") ) {

    _0RL_cd_a3d068595b8139d6_20000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_30000000, "getAngles", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "openHane") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_50000000, "openHane", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "closeHand") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_60000000, "closeHand", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setStiffness") ) {

    _0RL_cd_a3d068595b8139d6_70000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_80000000, "setStiffness", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStiffness") ) {

    _0RL_cd_a3d068595b8139d6_90000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a0000000, "getStiffness", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "rest") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c0000000, "rest", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "wakeUp") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d0000000, "wakeUp", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveTo") ) {

    _0RL_cd_a3d068595b8139d6_e0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f0000000, "moveTo", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveToward") ) {

    _0RL_cd_a3d068595b8139d6_e0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_01000000, "moveToward", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRobotPosition") ) {

    _0RL_cd_a3d068595b8139d6_11000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_21000000, "getRobotPosition", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRobotVelocity") ) {

    _0RL_cd_a3d068595b8139d6_11000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_31000000, "getRobotVelocity", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stopMove") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_41000000, "stopMove", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveIsActive") ) {

    _0RL_cd_a3d068595b8139d6_51000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_61000000, "moveIsActive", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "waitUntilMoveIsFinished") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_71000000, "waitUntilMoveIsFinished", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "moveInit") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_81000000, "moveInit", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setWalkArmEnabled") ) {

    _0RL_cd_a3d068595b8139d6_91000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a1000000, "setWalkArmEnabled", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getWalkArmEnabled") ) {

    _0RL_cd_a3d068595b8139d6_b1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c1000000, "getWalkArmEnabled", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getPosition") ) {

    _0RL_cd_a3d068595b8139d6_d1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e1000000, "getPosition", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setPosition") ) {

    _0RL_cd_a3d068595b8139d6_f1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_02000000, "setPosition", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setTransform") ) {

    _0RL_cd_a3d068595b8139d6_f1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_12000000, "setTransform", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getTransform") ) {

    _0RL_cd_a3d068595b8139d6_d1000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_22000000, "getTransform", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALMotion::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALMotion::_PD_repoId )
    return (::ssr::_impl_ALMotion*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALMotion::_PD_repoId) )
    return (::ssr::_impl_ALMotion*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALMotion::_mostDerivedRepoId()
{
  return ::ssr::ALMotion::_PD_repoId;
}

ssr::ALTextToSpeech_ptr ssr::ALTextToSpeech_Helper::_nil() {
  return ::ssr::ALTextToSpeech::_nil();
}

::CORBA::Boolean ssr::ALTextToSpeech_Helper::is_nil(::ssr::ALTextToSpeech_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALTextToSpeech_Helper::release(::ssr::ALTextToSpeech_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALTextToSpeech_Helper::marshalObjRef(::ssr::ALTextToSpeech_ptr obj, cdrStream& s) {
  ::ssr::ALTextToSpeech::_marshalObjRef(obj, s);
}

ssr::ALTextToSpeech_ptr ssr::ALTextToSpeech_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALTextToSpeech::_unmarshalObjRef(s);
}

void ssr::ALTextToSpeech_Helper::duplicate(::ssr::ALTextToSpeech_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALTextToSpeech_ptr
ssr::ALTextToSpeech::_duplicate(::ssr::ALTextToSpeech_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALTextToSpeech_ptr
ssr::ALTextToSpeech::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALTextToSpeech_ptr
ssr::ALTextToSpeech::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALTextToSpeech_ptr
ssr::ALTextToSpeech::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALTextToSpeech _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALTextToSpeech* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALTextToSpeech;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALTextToSpeech::_PD_repoId = "IDL:ssr/ALTextToSpeech:1.0";


ssr::_objref_ALTextToSpeech::~_objref_ALTextToSpeech() {
  
}


ssr::_objref_ALTextToSpeech::_objref_ALTextToSpeech(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALTextToSpeech::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALTextToSpeech::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALTextToSpeech::_PD_repoId )
    return (::ssr::ALTextToSpeech_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALTextToSpeech::_PD_repoId) )
    return (::ssr::ALTextToSpeech_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_32000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  impl->say(tcd->arg_0);


}

void ssr::_objref_ALTextToSpeech::say(const char* stringToSay)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_32000000, "say", 4);
  _call_desc.arg_0 = stringToSay;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cfloat
class _0RL_cd_a3d068595b8139d6_42000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_42000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Float arg_0;
};

void _0RL_cd_a3d068595b8139d6_42000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_42000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Float&)arg_0 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_42000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_52000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_42000000* tcd = (_0RL_cd_a3d068595b8139d6_42000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  impl->setVolume(tcd->arg_0);


}

void ssr::_objref_ALTextToSpeech::setVolume(::CORBA::Float volume)
{
  _0RL_cd_a3d068595b8139d6_42000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_52000000, "setVolume", 10);
  _call_desc.arg_0 = volume;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cfloat
class _0RL_cd_a3d068595b8139d6_62000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_62000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Float result;
};

void _0RL_cd_a3d068595b8139d6_62000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_62000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Float&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_62000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_72000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_62000000* tcd = (_0RL_cd_a3d068595b8139d6_62000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  tcd->result = impl->getVolume();


}

::CORBA::Float ssr::_objref_ALTextToSpeech::getVolume()
{
  _0RL_cd_a3d068595b8139d6_62000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_72000000, "getVolume", 10);


  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_82000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  impl->setLanguage(tcd->arg_0);


}

void ssr::_objref_ALTextToSpeech::setLanguage(const char* language)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_82000000, "setLanguage", 12);
  _call_desc.arg_0 = language;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring
class _0RL_cd_a3d068595b8139d6_92000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_92000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var result;
};

void _0RL_cd_a3d068595b8139d6_92000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_a3d068595b8139d6_92000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_a3d068595b8139d6_92000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_a2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_92000000* tcd = (_0RL_cd_a3d068595b8139d6_92000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  tcd->result = impl->getLanguage();


}

char* ssr::_objref_ALTextToSpeech::getLanguage()
{
  _0RL_cd_a3d068595b8139d6_92000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a2000000, "getLanguage", 12);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mStringArray
class _0RL_cd_a3d068595b8139d6_b2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_b2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ssr::StringArray_var result;
};

void _0RL_cd_a3d068595b8139d6_b2000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::StringArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_b2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::StringArray;
  (ssr::StringArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_b2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_c2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_b2000000* tcd = (_0RL_cd_a3d068595b8139d6_b2000000*)cd;
  ssr::_impl_ALTextToSpeech* impl = (ssr::_impl_ALTextToSpeech*) svnt->_ptrToInterface(ssr::ALTextToSpeech::_PD_repoId);
  tcd->result = impl->getAvailableLanguages();


}

ssr::StringArray* ssr::_objref_ALTextToSpeech::getAvailableLanguages()
{
  _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c2000000, "getAvailableLanguages", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ssr::_pof_ALTextToSpeech::~_pof_ALTextToSpeech() {}


omniObjRef*
ssr::_pof_ALTextToSpeech::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALTextToSpeech(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALTextToSpeech::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALTextToSpeech::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALTextToSpeech _the_pof_ssr_mALTextToSpeech;

ssr::_impl_ALTextToSpeech::~_impl_ALTextToSpeech() {}


::CORBA::Boolean
ssr::_impl_ALTextToSpeech::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "say") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_32000000, "say", 4, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setVolume") ) {

    _0RL_cd_a3d068595b8139d6_42000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_52000000, "setVolume", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getVolume") ) {

    _0RL_cd_a3d068595b8139d6_62000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_72000000, "getVolume", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setLanguage") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_82000000, "setLanguage", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLanguage") ) {

    _0RL_cd_a3d068595b8139d6_92000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_a2000000, "getLanguage", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getAvailableLanguages") ) {

    _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_c2000000, "getAvailableLanguages", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALTextToSpeech::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALTextToSpeech::_PD_repoId )
    return (::ssr::_impl_ALTextToSpeech*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALTextToSpeech::_PD_repoId) )
    return (::ssr::_impl_ALTextToSpeech*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALTextToSpeech::_mostDerivedRepoId()
{
  return ::ssr::ALTextToSpeech::_PD_repoId;
}

ssr::ALBehaviorManager_ptr ssr::ALBehaviorManager_Helper::_nil() {
  return ::ssr::ALBehaviorManager::_nil();
}

::CORBA::Boolean ssr::ALBehaviorManager_Helper::is_nil(::ssr::ALBehaviorManager_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALBehaviorManager_Helper::release(::ssr::ALBehaviorManager_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALBehaviorManager_Helper::marshalObjRef(::ssr::ALBehaviorManager_ptr obj, cdrStream& s) {
  ::ssr::ALBehaviorManager::_marshalObjRef(obj, s);
}

ssr::ALBehaviorManager_ptr ssr::ALBehaviorManager_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALBehaviorManager::_unmarshalObjRef(s);
}

void ssr::ALBehaviorManager_Helper::duplicate(::ssr::ALBehaviorManager_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALBehaviorManager_ptr
ssr::ALBehaviorManager::_duplicate(::ssr::ALBehaviorManager_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALBehaviorManager_ptr
ssr::ALBehaviorManager::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALBehaviorManager_ptr
ssr::ALBehaviorManager::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALBehaviorManager_ptr
ssr::ALBehaviorManager::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALBehaviorManager _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALBehaviorManager* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALBehaviorManager;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALBehaviorManager::_PD_repoId = "IDL:ssr/ALBehaviorManager:1.0";


ssr::_objref_ALBehaviorManager::~_objref_ALBehaviorManager() {
  
}


ssr::_objref_ALBehaviorManager::_objref_ALBehaviorManager(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALBehaviorManager::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALBehaviorManager::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALBehaviorManager::_PD_repoId )
    return (::ssr::ALBehaviorManager_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALBehaviorManager::_PD_repoId) )
    return (::ssr::ALBehaviorManager_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_d2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_b2000000* tcd = (_0RL_cd_a3d068595b8139d6_b2000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  tcd->result = impl->getInstalledBehaviors();


}

ssr::StringArray* ssr::_objref_ALBehaviorManager::getInstalledBehaviors()
{
  _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d2000000, "getInstalledBehaviors", 22);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_e2000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_b2000000* tcd = (_0RL_cd_a3d068595b8139d6_b2000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  tcd->result = impl->getRunningBehaviors();


}

ssr::StringArray* ssr::_objref_ALBehaviorManager::getRunningBehaviors()
{
  _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e2000000, "getRunningBehaviors", 20);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring
class _0RL_cd_a3d068595b8139d6_f2000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_f2000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a3d068595b8139d6_f2000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_f2000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_f2000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a3d068595b8139d6_f2000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a3d068595b8139d6_f2000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_03000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_f2000000* tcd = (_0RL_cd_a3d068595b8139d6_f2000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  tcd->result = impl->isBehaviorInstalled(tcd->arg_0);


}

::CORBA::Boolean ssr::_objref_ALBehaviorManager::isBehaviorInstalled(const char* name)
{
  _0RL_cd_a3d068595b8139d6_f2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_03000000, "isBehaviorInstalled", 20);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_13000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_f2000000* tcd = (_0RL_cd_a3d068595b8139d6_f2000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  tcd->result = impl->isBehaviorRunning(tcd->arg_0);


}

::CORBA::Boolean ssr::_objref_ALBehaviorManager::isBehaviorRunning(const char* name)
{
  _0RL_cd_a3d068595b8139d6_f2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_13000000, "isBehaviorRunning", 18);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_23000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  impl->runBehavior(tcd->arg_0);


}

void ssr::_objref_ALBehaviorManager::runBehavior(const char* name)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_23000000, "runBehavior", 12);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_33000000(omniCallDescriptor*, omniServant* svnt)
{
  
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  impl->stopAllBehaviors();


}

void ssr::_objref_ALBehaviorManager::stopAllBehaviors()
{
  _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_33000000, "stopAllBehaviors", 17);


  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_43000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_40000000* tcd = (_0RL_cd_a3d068595b8139d6_40000000*)cd;
  ssr::_impl_ALBehaviorManager* impl = (ssr::_impl_ALBehaviorManager*) svnt->_ptrToInterface(ssr::ALBehaviorManager::_PD_repoId);
  impl->stopBehavior(tcd->arg_0);


}

void ssr::_objref_ALBehaviorManager::stopBehavior(const char* name)
{
  _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_43000000, "stopBehavior", 13);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);



}
ssr::_pof_ALBehaviorManager::~_pof_ALBehaviorManager() {}


omniObjRef*
ssr::_pof_ALBehaviorManager::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALBehaviorManager(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALBehaviorManager::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALBehaviorManager::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALBehaviorManager _the_pof_ssr_mALBehaviorManager;

ssr::_impl_ALBehaviorManager::~_impl_ALBehaviorManager() {}


::CORBA::Boolean
ssr::_impl_ALBehaviorManager::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getInstalledBehaviors") ) {

    _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d2000000, "getInstalledBehaviors", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRunningBehaviors") ) {

    _0RL_cd_a3d068595b8139d6_b2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e2000000, "getRunningBehaviors", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "isBehaviorInstalled") ) {

    _0RL_cd_a3d068595b8139d6_f2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_03000000, "isBehaviorInstalled", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "isBehaviorRunning") ) {

    _0RL_cd_a3d068595b8139d6_f2000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_13000000, "isBehaviorRunning", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "runBehavior") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_23000000, "runBehavior", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stopAllBehaviors") ) {

    _0RL_cd_a3d068595b8139d6_b0000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_33000000, "stopAllBehaviors", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "stopBehavior") ) {

    _0RL_cd_a3d068595b8139d6_40000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_43000000, "stopBehavior", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALBehaviorManager::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALBehaviorManager::_PD_repoId )
    return (::ssr::_impl_ALBehaviorManager*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALBehaviorManager::_PD_repoId) )
    return (::ssr::_impl_ALBehaviorManager*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALBehaviorManager::_mostDerivedRepoId()
{
  return ::ssr::ALBehaviorManager::_PD_repoId;
}

ssr::ALMemory_ptr ssr::ALMemory_Helper::_nil() {
  return ::ssr::ALMemory::_nil();
}

::CORBA::Boolean ssr::ALMemory_Helper::is_nil(::ssr::ALMemory_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALMemory_Helper::release(::ssr::ALMemory_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALMemory_Helper::marshalObjRef(::ssr::ALMemory_ptr obj, cdrStream& s) {
  ::ssr::ALMemory::_marshalObjRef(obj, s);
}

ssr::ALMemory_ptr ssr::ALMemory_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALMemory::_unmarshalObjRef(s);
}

void ssr::ALMemory_Helper::duplicate(::ssr::ALMemory_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALMemory_ptr
ssr::ALMemory::_duplicate(::ssr::ALMemory_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALMemory_ptr
ssr::ALMemory::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALMemory_ptr
ssr::ALMemory::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALMemory_ptr
ssr::ALMemory::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALMemory _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALMemory* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALMemory;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALMemory::_PD_repoId = "IDL:ssr/ALMemory:1.0";


ssr::_objref_ALMemory::~_objref_ALMemory() {
  
}


ssr::_objref_ALMemory::_objref_ALMemory(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALMemory::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALMemory::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALMemory::_PD_repoId )
    return (::ssr::ALMemory_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALMemory::_PD_repoId) )
    return (::ssr::ALMemory_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_clong
class _0RL_cd_a3d068595b8139d6_53000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_53000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
};

void _0RL_cd_a3d068595b8139d6_53000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_53000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_53000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_63000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_53000000* tcd = (_0RL_cd_a3d068595b8139d6_53000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertLongData(tcd->arg_0, tcd->arg_1);


}

void ssr::_objref_ALMemory::insertLongData(const char* name, ::CORBA::Long value)
{
  _0RL_cd_a3d068595b8139d6_53000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_63000000, "insertLongData", 15);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_73000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_53000000* tcd = (_0RL_cd_a3d068595b8139d6_53000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertFloatData(tcd->arg_0, tcd->arg_1);


}

void ssr::_objref_ALMemory::insertFloatData(const char* name, ::CORBA::Long value)
{
  _0RL_cd_a3d068595b8139d6_53000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_73000000, "insertFloatData", 16);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cstring
class _0RL_cd_a3d068595b8139d6_83000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_83000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
};

void _0RL_cd_a3d068595b8139d6_83000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_a3d068595b8139d6_83000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_83000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_93000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_83000000* tcd = (_0RL_cd_a3d068595b8139d6_83000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertStringData(tcd->arg_0, tcd->arg_1);


}

void ssr::_objref_ALMemory::insertStringData(const char* name, const char* value)
{
  _0RL_cd_a3d068595b8139d6_83000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_93000000, "insertStringData", 17);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cssr_mLongArray
class _0RL_cd_a3d068595b8139d6_a3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_a3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::LongArray_var arg_1_;
  const ssr::LongArray* arg_1;
};

void _0RL_cd_a3d068595b8139d6_a3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const ssr::LongArray&) *arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_a3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new ssr::LongArray;
  (ssr::LongArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_a3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_b3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_a3000000* tcd = (_0RL_cd_a3d068595b8139d6_a3000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertoLongArrayData(tcd->arg_0, *tcd->arg_1);


}

void ssr::_objref_ALMemory::insertoLongArrayData(const char* name, const ::ssr::LongArray& value)
{
  _0RL_cd_a3d068595b8139d6_a3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_b3000000, "insertoLongArrayData", 21);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::ssr::LongArray&) value;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cssr_mFloatArray
class _0RL_cd_a3d068595b8139d6_c3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_c3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::FloatArray_var arg_1_;
  const ssr::FloatArray* arg_1;
};

void _0RL_cd_a3d068595b8139d6_c3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const ssr::FloatArray&) *arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_c3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new ssr::FloatArray;
  (ssr::FloatArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_c3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_d3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c3000000* tcd = (_0RL_cd_a3d068595b8139d6_c3000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertoFloatArrayData(tcd->arg_0, *tcd->arg_1);


}

void ssr::_objref_ALMemory::insertoFloatArrayData(const char* name, const ::ssr::FloatArray& value)
{
  _0RL_cd_a3d068595b8139d6_c3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d3000000, "insertoFloatArrayData", 22);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::ssr::FloatArray&) value;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cssr_mStringArray
class _0RL_cd_a3d068595b8139d6_e3000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_e3000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::StringArray_var arg_1_;
  const ssr::StringArray* arg_1;
};

void _0RL_cd_a3d068595b8139d6_e3000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  (const ssr::StringArray&) *arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_e3000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = new ssr::StringArray;
  (ssr::StringArray&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

const char* const _0RL_cd_a3d068595b8139d6_e3000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_f3000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_e3000000* tcd = (_0RL_cd_a3d068595b8139d6_e3000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  impl->insertoStringArrayData(tcd->arg_0, *tcd->arg_1);


}

void ssr::_objref_ALMemory::insertoStringArrayData(const char* name, const ::ssr::StringArray& value)
{
  _0RL_cd_a3d068595b8139d6_e3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f3000000, "insertoStringArrayData", 23);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = &(::ssr::StringArray&) value;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cstring
class _0RL_cd_a3d068595b8139d6_04000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_04000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_a3d068595b8139d6_04000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_04000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_04000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_04000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_04000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_14000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_04000000* tcd = (_0RL_cd_a3d068595b8139d6_04000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getLongData(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALMemory::getLongData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_04000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_14000000, "getLongData", 12);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cfloat_i_cstring
class _0RL_cd_a3d068595b8139d6_24000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_24000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Float result;
};

void _0RL_cd_a3d068595b8139d6_24000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_24000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_24000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_24000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Float&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_24000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_34000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_24000000* tcd = (_0RL_cd_a3d068595b8139d6_24000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getFloatData(tcd->arg_0);


}

::CORBA::Float ssr::_objref_ALMemory::getFloatData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_24000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_34000000, "getFloatData", 13);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring
class _0RL_cd_a3d068595b8139d6_44000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_44000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_a3d068595b8139d6_44000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_44000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_44000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_a3d068595b8139d6_44000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_a3d068595b8139d6_44000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_54000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_44000000* tcd = (_0RL_cd_a3d068595b8139d6_44000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getStringData(tcd->arg_0);


}

char* ssr::_objref_ALMemory::getStringData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_44000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_54000000, "getStringData", 14);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mLongArray_i_cstring
class _0RL_cd_a3d068595b8139d6_64000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_64000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::LongArray_var result;
};

void _0RL_cd_a3d068595b8139d6_64000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_64000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_64000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::LongArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_64000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::LongArray;
  (ssr::LongArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_64000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_74000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_64000000* tcd = (_0RL_cd_a3d068595b8139d6_64000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getLongArrayData(tcd->arg_0);


}

ssr::LongArray* ssr::_objref_ALMemory::getLongArrayData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_64000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_74000000, "getLongArrayData", 17);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mFloatArray_i_cstring
class _0RL_cd_a3d068595b8139d6_84000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_84000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::FloatArray_var result;
};

void _0RL_cd_a3d068595b8139d6_84000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_84000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_84000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::FloatArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_84000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::FloatArray;
  (ssr::FloatArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_84000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_94000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_84000000* tcd = (_0RL_cd_a3d068595b8139d6_84000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getFloatArrayData(tcd->arg_0);


}

ssr::FloatArray* ssr::_objref_ALMemory::getFloatArrayData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_84000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_94000000, "getFloatArrayData", 18);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cssr_mStringArray_i_cstring
class _0RL_cd_a3d068595b8139d6_a4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_a4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ssr::StringArray_var result;
};

void _0RL_cd_a3d068595b8139d6_a4000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_a3d068595b8139d6_a4000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_a3d068595b8139d6_a4000000::marshalReturnedValues(cdrStream& _n)
{
  (const ssr::StringArray&) result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_a4000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ssr::StringArray;
  (ssr::StringArray&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_a4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_b4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_a4000000* tcd = (_0RL_cd_a3d068595b8139d6_a4000000*)cd;
  ssr::_impl_ALMemory* impl = (ssr::_impl_ALMemory*) svnt->_ptrToInterface(ssr::ALMemory::_PD_repoId);
  tcd->result = impl->getStringArrayData(tcd->arg_0);


}

ssr::StringArray* ssr::_objref_ALMemory::getStringArrayData(const char* name)
{
  _0RL_cd_a3d068595b8139d6_a4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_b4000000, "getStringArrayData", 19);
  _call_desc.arg_0 = name;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ssr::_pof_ALMemory::~_pof_ALMemory() {}


omniObjRef*
ssr::_pof_ALMemory::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALMemory(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALMemory::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALMemory::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALMemory _the_pof_ssr_mALMemory;

ssr::_impl_ALMemory::~_impl_ALMemory() {}


::CORBA::Boolean
ssr::_impl_ALMemory::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "insertLongData") ) {

    _0RL_cd_a3d068595b8139d6_53000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_63000000, "insertLongData", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertFloatData") ) {

    _0RL_cd_a3d068595b8139d6_53000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_73000000, "insertFloatData", 16, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertStringData") ) {

    _0RL_cd_a3d068595b8139d6_83000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_93000000, "insertStringData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertoLongArrayData") ) {

    _0RL_cd_a3d068595b8139d6_a3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_b3000000, "insertoLongArrayData", 21, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertoFloatArrayData") ) {

    _0RL_cd_a3d068595b8139d6_c3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d3000000, "insertoFloatArrayData", 22, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "insertoStringArrayData") ) {

    _0RL_cd_a3d068595b8139d6_e3000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f3000000, "insertoStringArrayData", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLongData") ) {

    _0RL_cd_a3d068595b8139d6_04000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_14000000, "getLongData", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFloatData") ) {

    _0RL_cd_a3d068595b8139d6_24000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_34000000, "getFloatData", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStringData") ) {

    _0RL_cd_a3d068595b8139d6_44000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_54000000, "getStringData", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getLongArrayData") ) {

    _0RL_cd_a3d068595b8139d6_64000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_74000000, "getLongArrayData", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFloatArrayData") ) {

    _0RL_cd_a3d068595b8139d6_84000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_94000000, "getFloatArrayData", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getStringArrayData") ) {

    _0RL_cd_a3d068595b8139d6_a4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_b4000000, "getStringArrayData", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALMemory::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALMemory::_PD_repoId )
    return (::ssr::_impl_ALMemory*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALMemory::_PD_repoId) )
    return (::ssr::_impl_ALMemory*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALMemory::_mostDerivedRepoId()
{
  return ::ssr::ALMemory::_PD_repoId;
}

ssr::ALVideoDevice_ptr ssr::ALVideoDevice_Helper::_nil() {
  return ::ssr::ALVideoDevice::_nil();
}

::CORBA::Boolean ssr::ALVideoDevice_Helper::is_nil(::ssr::ALVideoDevice_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALVideoDevice_Helper::release(::ssr::ALVideoDevice_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALVideoDevice_Helper::marshalObjRef(::ssr::ALVideoDevice_ptr obj, cdrStream& s) {
  ::ssr::ALVideoDevice::_marshalObjRef(obj, s);
}

ssr::ALVideoDevice_ptr ssr::ALVideoDevice_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALVideoDevice::_unmarshalObjRef(s);
}

void ssr::ALVideoDevice_Helper::duplicate(::ssr::ALVideoDevice_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALVideoDevice_ptr
ssr::ALVideoDevice::_duplicate(::ssr::ALVideoDevice_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALVideoDevice_ptr
ssr::ALVideoDevice::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALVideoDevice_ptr
ssr::ALVideoDevice::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALVideoDevice_ptr
ssr::ALVideoDevice::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALVideoDevice _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALVideoDevice* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALVideoDevice;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALVideoDevice::_PD_repoId = "IDL:ssr/ALVideoDevice:1.0";


ssr::_objref_ALVideoDevice::~_objref_ALVideoDevice() {
  
}


ssr::_objref_ALVideoDevice::_objref_ALVideoDevice(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALVideoDevice::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALVideoDevice::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALVideoDevice::_PD_repoId )
    return (::ssr::ALVideoDevice_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALVideoDevice::_PD_repoId) )
    return (::ssr::ALVideoDevice_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong
class _0RL_cd_a3d068595b8139d6_c4000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_c4000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_a3d068595b8139d6_c4000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_c4000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_a3d068595b8139d6_c4000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_a3d068595b8139d6_c4000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_c4000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_d4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c4000000* tcd = (_0RL_cd_a3d068595b8139d6_c4000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->getCameraModel(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALVideoDevice::getCameraModel(::CORBA::Long index)
{
  _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d4000000, "getCameraModel", 15);
  _call_desc.arg_0 = index;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_e4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c4000000* tcd = (_0RL_cd_a3d068595b8139d6_c4000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->getFrameRate(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALVideoDevice::getFrameRate(::CORBA::Long index)
{
  _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e4000000, "getFrameRate", 13);
  _call_desc.arg_0 = index;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_f4000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c4000000* tcd = (_0RL_cd_a3d068595b8139d6_c4000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->getResolution(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALVideoDevice::getResolution(::CORBA::Long index)
{
  _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f4000000, "getResolution", 14);
  _call_desc.arg_0 = index;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_05000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c4000000* tcd = (_0RL_cd_a3d068595b8139d6_c4000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->getColorSpace(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALVideoDevice::getColorSpace(::CORBA::Long index)
{
  _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_05000000, "getColorSpace", 14);
  _call_desc.arg_0 = index;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_clong
class _0RL_cd_a3d068595b8139d6_15000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_15000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Boolean result;
};

void _0RL_cd_a3d068595b8139d6_15000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_15000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

void _0RL_cd_a3d068595b8139d6_15000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a3d068595b8139d6_15000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a3d068595b8139d6_15000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_25000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_15000000* tcd = (_0RL_cd_a3d068595b8139d6_15000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->setCameraParameter(tcd->arg_0, tcd->arg_1);


}

::CORBA::Boolean ssr::_objref_ALVideoDevice::setCameraParameter(::CORBA::Long id, ::CORBA::Long value)
{
  _0RL_cd_a3d068595b8139d6_15000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_25000000, "setCameraParameter", 19);
  _call_desc.arg_0 = id;
  _call_desc.arg_1 = value;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_35000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_c4000000* tcd = (_0RL_cd_a3d068595b8139d6_c4000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->getCameraParameter(tcd->arg_0);


}

::CORBA::Long ssr::_objref_ALVideoDevice::getCameraParameter(::CORBA::Long id)
{
  _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_35000000, "getCameraParameter", 19);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong
class _0RL_cd_a3d068595b8139d6_45000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_45000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_a3d068595b8139d6_45000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_45000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_a3d068595b8139d6_45000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_a3d068595b8139d6_45000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_a3d068595b8139d6_45000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_55000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_45000000* tcd = (_0RL_cd_a3d068595b8139d6_45000000*)cd;
  ssr::_impl_ALVideoDevice* impl = (ssr::_impl_ALVideoDevice*) svnt->_ptrToInterface(ssr::ALVideoDevice::_PD_repoId);
  tcd->result = impl->setCameraParameterToDefault(tcd->arg_0);


}

::CORBA::Boolean ssr::_objref_ALVideoDevice::setCameraParameterToDefault(::CORBA::Long id)
{
  _0RL_cd_a3d068595b8139d6_45000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_55000000, "setCameraParameterToDefault", 28);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result;


}
ssr::_pof_ALVideoDevice::~_pof_ALVideoDevice() {}


omniObjRef*
ssr::_pof_ALVideoDevice::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALVideoDevice(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALVideoDevice::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALVideoDevice::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALVideoDevice _the_pof_ssr_mALVideoDevice;

ssr::_impl_ALVideoDevice::~_impl_ALVideoDevice() {}


::CORBA::Boolean
ssr::_impl_ALVideoDevice::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "getCameraModel") ) {

    _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_d4000000, "getCameraModel", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getFrameRate") ) {

    _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_e4000000, "getFrameRate", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getResolution") ) {

    _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_f4000000, "getResolution", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getColorSpace") ) {

    _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_05000000, "getColorSpace", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCameraParameter") ) {

    _0RL_cd_a3d068595b8139d6_15000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_25000000, "setCameraParameter", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getCameraParameter") ) {

    _0RL_cd_a3d068595b8139d6_c4000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_35000000, "getCameraParameter", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "setCameraParameterToDefault") ) {

    _0RL_cd_a3d068595b8139d6_45000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_55000000, "setCameraParameterToDefault", 28, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALVideoDevice::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALVideoDevice::_PD_repoId )
    return (::ssr::_impl_ALVideoDevice*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALVideoDevice::_PD_repoId) )
    return (::ssr::_impl_ALVideoDevice*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALVideoDevice::_mostDerivedRepoId()
{
  return ::ssr::ALVideoDevice::_PD_repoId;
}

ssr::ALLeds_ptr ssr::ALLeds_Helper::_nil() {
  return ::ssr::ALLeds::_nil();
}

::CORBA::Boolean ssr::ALLeds_Helper::is_nil(::ssr::ALLeds_ptr p) {
  return ::CORBA::is_nil(p);

}

void ssr::ALLeds_Helper::release(::ssr::ALLeds_ptr p) {
  ::CORBA::release(p);
}

void ssr::ALLeds_Helper::marshalObjRef(::ssr::ALLeds_ptr obj, cdrStream& s) {
  ::ssr::ALLeds::_marshalObjRef(obj, s);
}

ssr::ALLeds_ptr ssr::ALLeds_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ssr::ALLeds::_unmarshalObjRef(s);
}

void ssr::ALLeds_Helper::duplicate(::ssr::ALLeds_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ssr::ALLeds_ptr
ssr::ALLeds::_duplicate(::ssr::ALLeds_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ssr::ALLeds_ptr
ssr::ALLeds::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ssr::ALLeds_ptr
ssr::ALLeds::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ssr::ALLeds_ptr
ssr::ALLeds::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ALLeds _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ALLeds* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_ALLeds;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ssr::ALLeds::_PD_repoId = "IDL:ssr/ALLeds:1.0";


ssr::_objref_ALLeds::~_objref_ALLeds() {
  
}


ssr::_objref_ALLeds::_objref_ALLeds(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ssr::ALLeds::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ssr::_objref_ALLeds::_ptrToObjRef(const char* id)
{
  if( id == ::ssr::ALLeds::_PD_repoId )
    return (::ssr::ALLeds_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ssr::ALLeds::_PD_repoId) )
    return (::ssr::ALLeds_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cfloat_i_cfloat
class _0RL_cd_a3d068595b8139d6_65000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_65000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Float arg_1;
  ::CORBA::Float arg_2;
};

void _0RL_cd_a3d068595b8139d6_65000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_65000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Float&)arg_1 <<= _n;
  (::CORBA::Float&)arg_2 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_65000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_75000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_65000000* tcd = (_0RL_cd_a3d068595b8139d6_65000000*)cd;
  ssr::_impl_ALLeds* impl = (ssr::_impl_ALLeds*) svnt->_ptrToInterface(ssr::ALLeds::_PD_repoId);
  impl->fade(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void ssr::_objref_ALLeds::fade(const char* name, ::CORBA::Float intensity, ::CORBA::Float duration)
{
  _0RL_cd_a3d068595b8139d6_65000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_75000000, "fade", 5);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = intensity;
  _call_desc.arg_2 = duration;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_clong_i_cfloat
class _0RL_cd_a3d068595b8139d6_85000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_a3d068595b8139d6_85000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Float arg_2;
};

void _0RL_cd_a3d068595b8139d6_85000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_a3d068595b8139d6_85000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Float&)arg_2 <<= _n;

}

const char* const _0RL_cd_a3d068595b8139d6_85000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_a3d068595b8139d6_95000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_a3d068595b8139d6_85000000* tcd = (_0RL_cd_a3d068595b8139d6_85000000*)cd;
  ssr::_impl_ALLeds* impl = (ssr::_impl_ALLeds*) svnt->_ptrToInterface(ssr::ALLeds::_PD_repoId);
  impl->fadeRGB(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void ssr::_objref_ALLeds::fadeRGB(const char* name, ::CORBA::Long rgb, ::CORBA::Float duration)
{
  _0RL_cd_a3d068595b8139d6_85000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_95000000, "fadeRGB", 8);
  _call_desc.arg_0 = name;
  _call_desc.arg_1 = rgb;
  _call_desc.arg_2 = duration;

  _invoke(_call_desc);



}
ssr::_pof_ALLeds::~_pof_ALLeds() {}


omniObjRef*
ssr::_pof_ALLeds::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ssr::_objref_ALLeds(ior, id);
}


::CORBA::Boolean
ssr::_pof_ALLeds::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ssr::ALLeds::_PD_repoId) )
    return 1;
  
  return 0;
}

const ssr::_pof_ALLeds _the_pof_ssr_mALLeds;

ssr::_impl_ALLeds::~_impl_ALLeds() {}


::CORBA::Boolean
ssr::_impl_ALLeds::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "fade") ) {

    _0RL_cd_a3d068595b8139d6_65000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_75000000, "fade", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "fadeRGB") ) {

    _0RL_cd_a3d068595b8139d6_85000000 _call_desc(_0RL_lcfn_a3d068595b8139d6_95000000, "fadeRGB", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ssr::_impl_ALLeds::_ptrToInterface(const char* id)
{
  if( id == ::ssr::ALLeds::_PD_repoId )
    return (::ssr::_impl_ALLeds*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ssr::ALLeds::_PD_repoId) )
    return (::ssr::_impl_ALLeds*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ssr::_impl_ALLeds::_mostDerivedRepoId()
{
  return ::ssr::ALLeds::_PD_repoId;
}

POA_ssr::ALMotion::~ALMotion() {}

POA_ssr::ALTextToSpeech::~ALTextToSpeech() {}

POA_ssr::ALBehaviorManager::~ALBehaviorManager() {}

POA_ssr::ALMemory::~ALMemory() {}

POA_ssr::ALVideoDevice::~ALVideoDevice() {}

POA_ssr::ALLeds::~ALLeds() {}

